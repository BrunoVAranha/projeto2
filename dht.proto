syntax = "proto3";

package dht;

// The request message containing the node ID and port.
message JoinRequest {
  int32 node_id = 1;
  int32 port = 2;
}

// The response message confirming the join request.
message JoinResponse {
  bool success = 1;
}

// The request message containing the node ID to update.
message UpdateNodeRequest {
  int32 node_id = 1;
}

// The response message confirming the update.
message UpdateNodeResponse {
  bool success = 1;
}

message UpdatePredecessorRequest {
  int32 node_id = 1;
}

message UpdatePredecessorResponse {
  bool success = 1;
}

message UpdateSucessorRequest {
  int32 node_id = 1;
}

message UpdateSucessorResponse {
  bool success = 1;
}

// The request message containing the node ID.
message NodeQueryRequest {
  int32 node_id = 1;
}

// The response message containing the node's successor and predecessor.
message NodeQueryResponse {
  int32 successor = 1;
  int32 predecessor = 2;
}

// Define the message types
message IntRequest {
    int32 number = 1;
}

message IntResponse {
    string message = 1;
}

message HashRequest {
    string hash = 1;
    int32 value =2;
}

message HashResponse {
    string message = 1;
}

// Define the message types
message AddCodeRequest {
    int32 number = 1;
}

message AddCodeResponse {
    string message = 1;
}

// The Node service definition.
service Node {
  // Sends a join request to the node.
  rpc Join (JoinRequest) returns (JoinResponse);

  // Queries the successor and predecessor of a given node.
  rpc QueryNode (NodeQueryRequest) returns (NodeQueryResponse);

  // Updates the successor and predecessor for a given node.
  rpc UpdateNode (UpdateNodeRequest) returns (UpdateNodeResponse);

  // Updates the predecessor of a given node.
  rpc UpdatePredecessor (UpdatePredecessorRequest) returns (UpdatePredecessorResponse);

  // Updates the successor of a given node.
  rpc UpdateSucessor (UpdateSucessorRequest) returns (UpdateSucessorResponse);

  // Method that takes an integer and returns an acknowledgment
  rpc SendInt(IntRequest) returns (IntResponse) {}

  // Receber o hash que ser√° procurado na dht
  rpc ReceiveHash(HashRequest) returns (HashResponse) {}

  // enviar um inteiro
  rpc AddCode(AddCodeRequest) returns (AddCodeResponse) {}

}
